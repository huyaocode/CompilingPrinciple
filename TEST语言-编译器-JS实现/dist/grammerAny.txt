符号栈                                                                                                                                                             使用产生式                                                                                                                                                 读入符号                符号栈                                                                                                                                                                                                                                   
#                                                                                                                                                               <program>->{<declaration_list><statement_list>}                                                                                                       {                   int a ; int i ; int b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #             
# } <statement_list> <declaration_list>                                                                                                                         null                                                                                                                                                  int                 a ; int i ; int b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                 
# } <statement_list>                                                                                                                                            <declaration_list>-><declaration_list*>                                                                                                               int                 a ; int i ; int b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                 
# } <statement_list>                                                                                                                                            <declaration_list*>-><declaration_stat><declaration_list*>                                                                                            int                 a ; int i ; int b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                 
# } <statement_list> <declaration_list*>                                                                                                                        <declaration_stat>->intID;                                                                                                                            int                 a ; int i ; int b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                 
# } <statement_list> <declaration_list*> ; ID                                                                                                                   null                                                                                                                                                  ID                  ; int i ; int b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                   
# } <statement_list> <declaration_list*> ;                                                                                                                      null                                                                                                                                                  ;                   int i ; int b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                     
# } <statement_list> <declaration_list*>                                                                                                                        null                                                                                                                                                  int                 i ; int b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                         
# } <statement_list>                                                                                                                                            <declaration_list*>-><declaration_stat><declaration_list*>                                                                                            int                 i ; int b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                         
# } <statement_list> <declaration_list*>                                                                                                                        <declaration_stat>->intID;                                                                                                                            int                 i ; int b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                         
# } <statement_list> <declaration_list*> ; ID                                                                                                                   null                                                                                                                                                  ID                  ; int b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                           
# } <statement_list> <declaration_list*> ;                                                                                                                      null                                                                                                                                                  ;                   int b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                             
# } <statement_list> <declaration_list*>                                                                                                                        null                                                                                                                                                  int                 b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                 
# } <statement_list>                                                                                                                                            <declaration_list*>-><declaration_stat><declaration_list*>                                                                                            int                 b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                 
# } <statement_list> <declaration_list*>                                                                                                                        <declaration_stat>->intID;                                                                                                                            int                 b2 ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                 
# } <statement_list> <declaration_list*> ; ID                                                                                                                   null                                                                                                                                                  ID                  ; int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                    
# } <statement_list> <declaration_list*> ;                                                                                                                      null                                                                                                                                                  ;                   int c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                      
# } <statement_list> <declaration_list*>                                                                                                                        null                                                                                                                                                  int                 c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                          
# } <statement_list>                                                                                                                                            <declaration_list*>-><declaration_stat><declaration_list*>                                                                                            int                 c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                          
# } <statement_list> <declaration_list*>                                                                                                                        <declaration_stat>->intID;                                                                                                                            int                 c ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                          
# } <statement_list> <declaration_list*> ; ID                                                                                                                   null                                                                                                                                                  ID                  ; for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                            
# } <statement_list> <declaration_list*> ;                                                                                                                      null                                                                                                                                                  ;                   for ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                              
# } <statement_list> <declaration_list*>                                                                                                                        null                                                                                                                                                  for                 ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                  
# } <statement_list>                                                                                                                                            <declaration_list*>->#                                                                                                                                for                 ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                  
# }                                                                                                                                                             <statement_list>-><statement_list*>                                                                                                                   for                 ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                  
# }                                                                                                                                                             <statement_list*>-><statement><statement_list*>                                                                                                       for                 ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                  
# } <statement_list*>                                                                                                                                           <statement>-><for_stat>                                                                                                                               for                 ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                  
# } <statement_list*>                                                                                                                                           <for_stat>->for(<assignment_expression>;<bool_expression>;<assignment_expression>)<statement>                                                         for                 ( i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                  
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression> ; <assignment_expression> (                                                     null                                                                                                                                                  (                   i = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                    
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression> ; <assignment_expression>                                                       null                                                                                                                                                  ID                  = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                      
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression> ;                                                                               <assignment_expression>->ID=<arithmetic_expression>                                                                                                   ID                  = 1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                      
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression> ; <arithmetic_expression> =                                                     null                                                                                                                                                  =                   1 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                        
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression> ; <arithmetic_expression>                                                       null                                                                                                                                                  NUM                 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                          
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression> ;                                                                               <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               NUM                 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                          
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression> ; <arithmetic_expression*>                                                      <term>-><factor><term*>                                                                                                                               NUM                 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                          
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression> ; <arithmetic_expression*> <term*>                                              <factor>->NUM                                                                                                                                         NUM                 ; i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                          
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression> ; <arithmetic_expression*> <term*>                                              null                                                                                                                                                  ;                   i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                            
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression> ; <arithmetic_expression*>                                                      <term*>->#                                                                                                                                            ;                   i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                            
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression> ;                                                                               <arithmetic_expression*>->#                                                                                                                           ;                   i <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                            
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression>                                                                                 null                                                                                                                                                  ID                  <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                              
# } <statement_list*> <statement> ) <assignment_expression> ;                                                                                                   <bool_expression>-><arithmetic_expression><bool_expression^>                                                                                          ID                  <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                              
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression^>                                                                                <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               ID                  <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                              
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression^> <arithmetic_expression*>                                                       <term>-><factor><term*>                                                                                                                               ID                  <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                              
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression^> <arithmetic_expression*> <term*>                                               <factor>->ID                                                                                                                                          ID                  <= 10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                              
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression^> <arithmetic_expression*> <term*>                                               null                                                                                                                                                  <=                  10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                 
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression^> <arithmetic_expression*>                                                       <term*>->#                                                                                                                                            <=                  10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                 
# } <statement_list*> <statement> ) <assignment_expression> ; <bool_expression^>                                                                                <arithmetic_expression*>->#                                                                                                                           <=                  10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                 
# } <statement_list*> <statement> ) <assignment_expression> ;                                                                                                   <bool_expression^>-><=<arithmetic_expression>                                                                                                         <=                  10 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                 
# } <statement_list*> <statement> ) <assignment_expression> ; <arithmetic_expression>                                                                           null                                                                                                                                                  NUM                 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                    
# } <statement_list*> <statement> ) <assignment_expression> ;                                                                                                   <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               NUM                 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                    
# } <statement_list*> <statement> ) <assignment_expression> ; <arithmetic_expression*>                                                                          <term>-><factor><term*>                                                                                                                               NUM                 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                    
# } <statement_list*> <statement> ) <assignment_expression> ; <arithmetic_expression*> <term*>                                                                  <factor>->NUM                                                                                                                                         NUM                 ; i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                    
# } <statement_list*> <statement> ) <assignment_expression> ; <arithmetic_expression*> <term*>                                                                  null                                                                                                                                                  ;                   i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                      
# } <statement_list*> <statement> ) <assignment_expression> ; <arithmetic_expression*>                                                                          <term*>->#                                                                                                                                            ;                   i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                      
# } <statement_list*> <statement> ) <assignment_expression> ;                                                                                                   <arithmetic_expression*>->#                                                                                                                           ;                   i = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                      
# } <statement_list*> <statement> ) <assignment_expression>                                                                                                     null                                                                                                                                                  ID                  = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                        
# } <statement_list*> <statement> )                                                                                                                             <assignment_expression>->ID=<arithmetic_expression>                                                                                                   ID                  = i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                        
# } <statement_list*> <statement> ) <arithmetic_expression> =                                                                                                   null                                                                                                                                                  =                   i + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                          
# } <statement_list*> <statement> ) <arithmetic_expression>                                                                                                     null                                                                                                                                                  ID                  + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                            
# } <statement_list*> <statement> )                                                                                                                             <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               ID                  + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                            
# } <statement_list*> <statement> ) <arithmetic_expression*>                                                                                                    <term>-><factor><term*>                                                                                                                               ID                  + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                            
# } <statement_list*> <statement> ) <arithmetic_expression*> <term*>                                                                                            <factor>->ID                                                                                                                                          ID                  + 1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                            
# } <statement_list*> <statement> ) <arithmetic_expression*> <term*>                                                                                            null                                                                                                                                                  +                   1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                              
# } <statement_list*> <statement> ) <arithmetic_expression*>                                                                                                    <term*>->+<factor><term*>                                                                                                                             +                   1 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                              
# } <statement_list*> <statement> ) <arithmetic_expression*> <term*> <factor>                                                                                   null                                                                                                                                                  NUM                 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                
# } <statement_list*> <statement> ) <arithmetic_expression*> <term*>                                                                                            <factor>->NUM                                                                                                                                         NUM                 ) { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                
# } <statement_list*> <statement> ) <arithmetic_expression*> <term*>                                                                                            null                                                                                                                                                  )                   { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                  
# } <statement_list*> <statement> ) <arithmetic_expression*>                                                                                                    <term*>->#                                                                                                                                            )                   { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                  
# } <statement_list*> <statement> )                                                                                                                             <arithmetic_expression*>->#                                                                                                                           )                   { a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                  
# } <statement_list*> <statement>                                                                                                                               null                                                                                                                                                  {                   a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                    
# } <statement_list*>                                                                                                                                           <statement>-><compound_stat>                                                                                                                          {                   a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                    
# } <statement_list*>                                                                                                                                           <compound_stat>->{<statement_list>}                                                                                                                   {                   a = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                    
# } <statement_list*> } <statement_list>                                                                                                                        null                                                                                                                                                  ID                  = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                      
# } <statement_list*> }                                                                                                                                         <statement_list>-><statement_list*>                                                                                                                   ID                  = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                      
# } <statement_list*> }                                                                                                                                         <statement_list*>-><statement><statement_list*>                                                                                                       ID                  = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                      
# } <statement_list*> } <statement_list*>                                                                                                                       <statement>-><assignment_stat>                                                                                                                        ID                  = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                      
# } <statement_list*> } <statement_list*>                                                                                                                       <assignment_stat>-><assignment_expression>;                                                                                                           ID                  = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                      
# } <statement_list*> } <statement_list*> ;                                                                                                                     <assignment_expression>->ID=<arithmetic_expression>                                                                                                   ID                  = a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                      
# } <statement_list*> } <statement_list*> ; <arithmetic_expression> =                                                                                           null                                                                                                                                                  =                   a + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                        
# } <statement_list*> } <statement_list*> ; <arithmetic_expression>                                                                                             null                                                                                                                                                  ID                  + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                          
# } <statement_list*> } <statement_list*> ;                                                                                                                     <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               ID                  + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                          
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                                                                            <term>-><factor><term*>                                                                                                                               ID                  + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                          
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                                    <factor>->ID                                                                                                                                          ID                  + i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                          
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                                    null                                                                                                                                                  +                   i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                            
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                                                                            <term*>->+<factor><term*>                                                                                                                             +                   i ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                            
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> <factor>                                                                           null                                                                                                                                                  ID                  ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                              
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                                    <factor>->ID                                                                                                                                          ID                  ; b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                              
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                                    null                                                                                                                                                  ;                   b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                                                                            <term*>->#                                                                                                                                            ;                   b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                
# } <statement_list*> } <statement_list*> ;                                                                                                                     <arithmetic_expression*>->#                                                                                                                           ;                   b = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                
# } <statement_list*> } <statement_list*>                                                                                                                       null                                                                                                                                                  ID                  = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                  
# } <statement_list*> }                                                                                                                                         <statement_list*>-><statement><statement_list*>                                                                                                       ID                  = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                  
# } <statement_list*> } <statement_list*>                                                                                                                       <statement>-><assignment_stat>                                                                                                                        ID                  = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                  
# } <statement_list*> } <statement_list*>                                                                                                                       <assignment_stat>-><assignment_expression>;                                                                                                           ID                  = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                  
# } <statement_list*> } <statement_list*> ;                                                                                                                     <assignment_expression>->ID=<arithmetic_expression>                                                                                                   ID                  = b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                  
# } <statement_list*> } <statement_list*> ; <arithmetic_expression> =                                                                                           null                                                                                                                                                  =                   b * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                    
# } <statement_list*> } <statement_list*> ; <arithmetic_expression>                                                                                             null                                                                                                                                                  ID                  * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                      
# } <statement_list*> } <statement_list*> ;                                                                                                                     <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               ID                  * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                      
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                                                                            <term>-><factor><term*>                                                                                                                               ID                  * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                      
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                                    <factor>->ID                                                                                                                                          ID                  * i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                      
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                                    null                                                                                                                                                  *                   i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                        
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                                                                            <term*>->*<factor><term>                                                                                                                              *                   i ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                        
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term> <factor>                                                                            null                                                                                                                                                  ID                  ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                          
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term>                                                                                     <factor>->ID                                                                                                                                          ID                  ; { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                          
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term>                                                                                     null                                                                                                                                                  ;                   { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                            
# } <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                                                                            <term>->#                                                                                                                                             ;                   { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                            
# } <statement_list*> } <statement_list*> ;                                                                                                                     <arithmetic_expression*>->#                                                                                                                           ;                   { c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                            
# } <statement_list*> } <statement_list*>                                                                                                                       null                                                                                                                                                  {                   c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                              
# } <statement_list*> }                                                                                                                                         <statement_list*>-><statement><statement_list*>                                                                                                       {                   c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                              
# } <statement_list*> } <statement_list*>                                                                                                                       <statement>-><compound_stat>                                                                                                                          {                   c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                              
# } <statement_list*> } <statement_list*>                                                                                                                       <compound_stat>->{<statement_list>}                                                                                                                   {                   c = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                              
# } <statement_list*> } <statement_list*> } <statement_list>                                                                                                    null                                                                                                                                                  ID                  = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                
# } <statement_list*> } <statement_list*> }                                                                                                                     <statement_list>-><statement_list*>                                                                                                                   ID                  = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                
# } <statement_list*> } <statement_list*> }                                                                                                                     <statement_list*>-><statement><statement_list*>                                                                                                       ID                  = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                
# } <statement_list*> } <statement_list*> } <statement_list*>                                                                                                   <statement>-><assignment_stat>                                                                                                                        ID                  = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                
# } <statement_list*> } <statement_list*> } <statement_list*>                                                                                                   <assignment_stat>-><assignment_expression>;                                                                                                           ID                  = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                
# } <statement_list*> } <statement_list*> } <statement_list*> ;                                                                                                 <assignment_expression>->ID=<arithmetic_expression>                                                                                                   ID                  = a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression> =                                                                       null                                                                                                                                                  =                   a + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                  
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression>                                                                         null                                                                                                                                                  ID                  + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                    
# } <statement_list*> } <statement_list*> } <statement_list*> ;                                                                                                 <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               ID                  + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                    
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                                                        <term>-><factor><term*>                                                                                                                               ID                  + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                    
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                <factor>->ID                                                                                                                                          ID                  + b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                    
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                null                                                                                                                                                  +                   b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                      
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                                                        <term*>->+<factor><term*>                                                                                                                             +                   b ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                      
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> <factor>                                                       null                                                                                                                                                  ID                  ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                        
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                <factor>->ID                                                                                                                                          ID                  ; } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                        
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                null                                                                                                                                                  ;                   } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                          
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                                                        <term*>->#                                                                                                                                            ;                   } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                          
# } <statement_list*> } <statement_list*> } <statement_list*> ;                                                                                                 <arithmetic_expression*>->#                                                                                                                           ;                   } while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                          
# } <statement_list*> } <statement_list*> } <statement_list*>                                                                                                   null                                                                                                                                                  }                   while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                            
# } <statement_list*> } <statement_list*> }                                                                                                                     <statement_list*>->#                                                                                                                                  }                   while ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                            
# } <statement_list*> } <statement_list*>                                                                                                                       null                                                                                                                                                  while               ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                  
# } <statement_list*> }                                                                                                                                         <statement_list*>-><statement><statement_list*>                                                                                                       while               ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                  
# } <statement_list*> } <statement_list*>                                                                                                                       <statement>-><while_stat>                                                                                                                             while               ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                  
# } <statement_list*> } <statement_list*>                                                                                                                       <while_stat>->while(<bool_expression>)<statement>                                                                                                     while               ( x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                  
# } <statement_list*> } <statement_list*> <statement> ) <bool_expression> (                                                                                     null                                                                                                                                                  (                   x <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                    
# } <statement_list*> } <statement_list*> <statement> ) <bool_expression>                                                                                       null                                                                                                                                                  ID                  <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                      
# } <statement_list*> } <statement_list*> <statement> )                                                                                                         <bool_expression>-><arithmetic_expression><bool_expression^>                                                                                          ID                  <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                      
# } <statement_list*> } <statement_list*> <statement> ) <bool_expression^>                                                                                      <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               ID                  <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                      
# } <statement_list*> } <statement_list*> <statement> ) <bool_expression^> <arithmetic_expression*>                                                             <term>-><factor><term*>                                                                                                                               ID                  <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                      
# } <statement_list*> } <statement_list*> <statement> ) <bool_expression^> <arithmetic_expression*> <term*>                                                     <factor>->ID                                                                                                                                          ID                  <= 10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                      
# } <statement_list*> } <statement_list*> <statement> ) <bool_expression^> <arithmetic_expression*> <term*>                                                     null                                                                                                                                                  <=                  10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                         
# } <statement_list*> } <statement_list*> <statement> ) <bool_expression^> <arithmetic_expression*>                                                             <term*>->#                                                                                                                                            <=                  10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                         
# } <statement_list*> } <statement_list*> <statement> ) <bool_expression^>                                                                                      <arithmetic_expression*>->#                                                                                                                           <=                  10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                         
# } <statement_list*> } <statement_list*> <statement> )                                                                                                         <bool_expression^>-><=<arithmetic_expression>                                                                                                         <=                  10 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                         
# } <statement_list*> } <statement_list*> <statement> ) <arithmetic_expression>                                                                                 null                                                                                                                                                  NUM                 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                            
# } <statement_list*> } <statement_list*> <statement> )                                                                                                         <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               NUM                 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                            
# } <statement_list*> } <statement_list*> <statement> ) <arithmetic_expression*>                                                                                <term>-><factor><term*>                                                                                                                               NUM                 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                            
# } <statement_list*> } <statement_list*> <statement> ) <arithmetic_expression*> <term*>                                                                        <factor>->NUM                                                                                                                                         NUM                 ) { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                            
# } <statement_list*> } <statement_list*> <statement> ) <arithmetic_expression*> <term*>                                                                        null                                                                                                                                                  )                   { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                              
# } <statement_list*> } <statement_list*> <statement> ) <arithmetic_expression*>                                                                                <term*>->#                                                                                                                                            )                   { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                              
# } <statement_list*> } <statement_list*> <statement> )                                                                                                         <arithmetic_expression*>->#                                                                                                                           )                   { C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                              
# } <statement_list*> } <statement_list*> <statement>                                                                                                           null                                                                                                                                                  {                   C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                
# } <statement_list*> } <statement_list*>                                                                                                                       <statement>-><compound_stat>                                                                                                                          {                   C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                
# } <statement_list*> } <statement_list*>                                                                                                                       <compound_stat>->{<statement_list>}                                                                                                                   {                   C = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                
# } <statement_list*> } <statement_list*> } <statement_list>                                                                                                    null                                                                                                                                                  ID                  = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                  
# } <statement_list*> } <statement_list*> }                                                                                                                     <statement_list>-><statement_list*>                                                                                                                   ID                  = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                  
# } <statement_list*> } <statement_list*> }                                                                                                                     <statement_list*>-><statement><statement_list*>                                                                                                       ID                  = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                  
# } <statement_list*> } <statement_list*> } <statement_list*>                                                                                                   <statement>-><assignment_stat>                                                                                                                        ID                  = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                  
# } <statement_list*> } <statement_list*> } <statement_list*>                                                                                                   <assignment_stat>-><assignment_expression>;                                                                                                           ID                  = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                  
# } <statement_list*> } <statement_list*> } <statement_list*> ;                                                                                                 <assignment_expression>->ID=<arithmetic_expression>                                                                                                   ID                  = a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                  
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression> =                                                                       null                                                                                                                                                  =                   a + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                    
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression>                                                                         null                                                                                                                                                  ID                  + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                      
# } <statement_list*> } <statement_list*> } <statement_list*> ;                                                                                                 <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               ID                  + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                      
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                                                        <term>-><factor><term*>                                                                                                                               ID                  + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                      
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                <factor>->ID                                                                                                                                          ID                  + b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                      
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                null                                                                                                                                                  +                   b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                        
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                                                        <term*>->+<factor><term*>                                                                                                                             +                   b + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                        
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> <factor>                                                       null                                                                                                                                                  ID                  + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                          
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                <factor>->ID                                                                                                                                          ID                  + ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                          
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                null                                                                                                                                                  +                   ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                            
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                                                        <term*>->+<factor><term*>                                                                                                                             +                   ( x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                            
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> <factor>                                                       null                                                                                                                                                  (                   x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                              
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                <factor>->(<arithmetic_expression>)                                                                                                                   (                   x * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                              
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> ) <arithmetic_expression>                                      null                                                                                                                                                  ID                  * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> )                                                              <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               ID                  * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> ) <arithmetic_expression*>                                     <term>-><factor><term*>                                                                                                                               ID                  * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> ) <arithmetic_expression*> <term*>                             <factor>->ID                                                                                                                                          ID                  * y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> ) <arithmetic_expression*> <term*>                             null                                                                                                                                                  *                   y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                  
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> ) <arithmetic_expression*>                                     <term*>->*<factor><term>                                                                                                                              *                   y ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                  
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> ) <arithmetic_expression*> <term> <factor>                     null                                                                                                                                                  ID                  ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                    
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> ) <arithmetic_expression*> <term>                              <factor>->ID                                                                                                                                          ID                  ) ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                    
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> ) <arithmetic_expression*> <term>                              null                                                                                                                                                  )                   ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                      
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> ) <arithmetic_expression*>                                     <term>->#                                                                                                                                             )                   ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                      
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> )                                                              <arithmetic_expression*>->#                                                                                                                           )                   ; if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                      
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                                                                null                                                                                                                                                  ;                   if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                        
# } <statement_list*> } <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                                                        <term*>->#                                                                                                                                            ;                   if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                        
# } <statement_list*> } <statement_list*> } <statement_list*> ;                                                                                                 <arithmetic_expression*>->#                                                                                                                           ;                   if ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                        
# } <statement_list*> } <statement_list*> } <statement_list*>                                                                                                   null                                                                                                                                                  if                  ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                           
# } <statement_list*> } <statement_list*> }                                                                                                                     <statement_list*>-><statement><statement_list*>                                                                                                       if                  ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                           
# } <statement_list*> } <statement_list*> } <statement_list*>                                                                                                   <statement>-><if_stat>                                                                                                                                if                  ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                           
# } <statement_list*> } <statement_list*> } <statement_list*>                                                                                                   <if_stat>->if(<bool_expression>)<statement><if_stat^>                                                                                                 if                  ( a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                           
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> ) <bool_expression> (                                                      null                                                                                                                                                  (                   a > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                             
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> ) <bool_expression>                                                        null                                                                                                                                                  ID                  > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                               
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> )                                                                          <bool_expression>-><arithmetic_expression><bool_expression^>                                                                                          ID                  > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                               
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> ) <bool_expression^>                                                       <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               ID                  > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                               
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> ) <bool_expression^> <arithmetic_expression*>                              <term>-><factor><term*>                                                                                                                               ID                  > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                               
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> ) <bool_expression^> <arithmetic_expression*> <term*>                      <factor>->ID                                                                                                                                          ID                  > b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                               
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> ) <bool_expression^> <arithmetic_expression*> <term*>                      null                                                                                                                                                  >                   b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                 
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> ) <bool_expression^> <arithmetic_expression*>                              <term*>->#                                                                                                                                            >                   b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                 
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> ) <bool_expression^>                                                       <arithmetic_expression*>->#                                                                                                                           >                   b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                 
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> )                                                                          <bool_expression^>->><arithmetic_expression>                                                                                                          >                   b ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                 
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> ) <arithmetic_expression>                                                  null                                                                                                                                                  ID                  ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                   
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> )                                                                          <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               ID                  ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                   
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> ) <arithmetic_expression*>                                                 <term>-><factor><term*>                                                                                                                               ID                  ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                   
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> ) <arithmetic_expression*> <term*>                                         <factor>->ID                                                                                                                                          ID                  ) { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                   
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> ) <arithmetic_expression*> <term*>                                         null                                                                                                                                                  )                   { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                     
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> ) <arithmetic_expression*>                                                 <term*>->#                                                                                                                                            )                   { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                     
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement> )                                                                          <arithmetic_expression*>->#                                                                                                                           )                   { read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                     
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> <statement>                                                                            null                                                                                                                                                  {                   read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                       
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^>                                                                                        <statement>-><compound_stat>                                                                                                                          {                   read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                       
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^>                                                                                        <compound_stat>->{<statement_list>}                                                                                                                   {                   read a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                       
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> } <statement_list>                                                                     null                                                                                                                                                  read                a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                            
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> }                                                                                      <statement_list>-><statement_list*>                                                                                                                   read                a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                            
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> }                                                                                      <statement_list*>-><statement><statement_list*>                                                                                                       read                a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                            
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> } <statement_list*>                                                                    <statement>-><read_stat>                                                                                                                              read                a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                            
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> } <statement_list*>                                                                    <read_stat>->readID;                                                                                                                                  read                a ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                            
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> } <statement_list*> ; ID                                                               null                                                                                                                                                  ID                  ; } else { write b + 5 ; } write c ; } #                                                                                                                                                                                              
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> } <statement_list*> ;                                                                  null                                                                                                                                                  ;                   } else { write b + 5 ; } write c ; } #                                                                                                                                                                                                
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> } <statement_list*>                                                                    null                                                                                                                                                  }                   else { write b + 5 ; } write c ; } #                                                                                                                                                                                                  
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^> }                                                                                      <statement_list*>->#                                                                                                                                  }                   else { write b + 5 ; } write c ; } #                                                                                                                                                                                                  
# } <statement_list*> } <statement_list*> } <statement_list*> <if_stat^>                                                                                        null                                                                                                                                                  else                { write b + 5 ; } write c ; } #                                                                                                                                                                                                       
# } <statement_list*> } <statement_list*> } <statement_list*>                                                                                                   <if_stat^>->else<statement_list*>                                                                                                                     else                { write b + 5 ; } write c ; } #                                                                                                                                                                                                       
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*>                                                                                 null                                                                                                                                                  {                   write b + 5 ; } write c ; } #                                                                                                                                                                                                         
# } <statement_list*> } <statement_list*> } <statement_list*>                                                                                                   <statement_list*>-><statement><statement_list*>                                                                                                       {                   write b + 5 ; } write c ; } #                                                                                                                                                                                                         
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*>                                                                                 <statement>-><compound_stat>                                                                                                                          {                   write b + 5 ; } write c ; } #                                                                                                                                                                                                         
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*>                                                                                 <compound_stat>->{<statement_list>}                                                                                                                   {                   write b + 5 ; } write c ; } #                                                                                                                                                                                                         
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list>                                                              null                                                                                                                                                  write               b + 5 ; } write c ; } #                                                                                                                                                                                                               
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> }                                                                               <statement_list>-><statement_list*>                                                                                                                   write               b + 5 ; } write c ; } #                                                                                                                                                                                                               
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> }                                                                               <statement_list*>-><statement><statement_list*>                                                                                                       write               b + 5 ; } write c ; } #                                                                                                                                                                                                               
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list*>                                                             <statement>-><write_stat>                                                                                                                             write               b + 5 ; } write c ; } #                                                                                                                                                                                                               
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list*>                                                             <write_stat>->write<arithmetic_expression>;                                                                                                           write               b + 5 ; } write c ; } #                                                                                                                                                                                                               
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list*> ; <arithmetic_expression>                                   null                                                                                                                                                  ID                  + 5 ; } write c ; } #                                                                                                                                                                                                                 
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list*> ;                                                           <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               ID                  + 5 ; } write c ; } #                                                                                                                                                                                                                 
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                  <term>-><factor><term*>                                                                                                                               ID                  + 5 ; } write c ; } #                                                                                                                                                                                                                 
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                          <factor>->ID                                                                                                                                          ID                  + 5 ; } write c ; } #                                                                                                                                                                                                                 
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                          null                                                                                                                                                  +                   5 ; } write c ; } #                                                                                                                                                                                                                   
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                  <term*>->+<factor><term*>                                                                                                                             +                   5 ; } write c ; } #                                                                                                                                                                                                                   
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*> <factor>                 null                                                                                                                                                  NUM                 ; } write c ; } #                                                                                                                                                                                                                     
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                          <factor>->NUM                                                                                                                                         NUM                 ; } write c ; } #                                                                                                                                                                                                                     
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list*> ; <arithmetic_expression*> <term*>                          null                                                                                                                                                  ;                   } write c ; } #                                                                                                                                                                                                                       
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list*> ; <arithmetic_expression*>                                  <term*>->#                                                                                                                                            ;                   } write c ; } #                                                                                                                                                                                                                       
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list*> ;                                                           <arithmetic_expression*>->#                                                                                                                           ;                   } write c ; } #                                                                                                                                                                                                                       
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> } <statement_list*>                                                             null                                                                                                                                                  }                   write c ; } #                                                                                                                                                                                                                         
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> }                                                                               <statement_list*>->#                                                                                                                                  }                   write c ; } #                                                                                                                                                                                                                         
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*>                                                                                 null                                                                                                                                                  write               c ; } #                                                                                                                                                                                                                               
# } <statement_list*> } <statement_list*> } <statement_list*>                                                                                                   <statement_list*>-><statement><statement_list*>                                                                                                       write               c ; } #                                                                                                                                                                                                                               
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*>                                                                                 <statement>-><write_stat>                                                                                                                             write               c ; } #                                                                                                                                                                                                                               
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*>                                                                                 <write_stat>->write<arithmetic_expression>;                                                                                                           write               c ; } #                                                                                                                                                                                                                               
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> ; <arithmetic_expression>                                                       null                                                                                                                                                  ID                  ; } #                                                                                                                                                                                                                                 
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> ;                                                                               <arithmetic_expression>-><term><arithmetic_expression*>                                                                                               ID                  ; } #                                                                                                                                                                                                                                 
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> ; <arithmetic_expression*>                                                      <term>-><factor><term*>                                                                                                                               ID                  ; } #                                                                                                                                                                                                                                 
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> ; <arithmetic_expression*> <term*>                                              <factor>->ID                                                                                                                                          ID                  ; } #                                                                                                                                                                                                                                 
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> ; <arithmetic_expression*> <term*>                                              null                                                                                                                                                  ;                   } #                                                                                                                                                                                                                                   
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> ; <arithmetic_expression*>                                                      <term*>->#                                                                                                                                            ;                   } #                                                                                                                                                                                                                                   
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*> ;                                                                               <arithmetic_expression*>->#                                                                                                                           ;                   } #                                                                                                                                                                                                                                   
# } <statement_list*> } <statement_list*> } <statement_list*> <statement_list*>                                                                                 null                                                                                                                                                  }                   #                                                                                                                                                                                                                                     
# } <statement_list*> } <statement_list*> } <statement_list*>                                                                                                   <statement_list*>->#                                                                                                                                  }                   #                                                                                                                                                                                                                                     
# } <statement_list*> } <statement_list*> }                                                                                                                     <statement_list*>->#                                                                                                                                  }                   #                                                                                                                                                                                                                                     
# } <statement_list*> } <statement_list*>                                                                                                                       null                                                                                                                                                  #                                                                                                                                                                                                                                                         

Error:  } 没有匹配
Error:  } 没有匹配